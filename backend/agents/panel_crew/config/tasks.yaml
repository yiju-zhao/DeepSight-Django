research_task:
  description: >
    围绕 {topic} 主题进行全面深入的研究，基于 {material_content} 作为核心材料，
    为播客创作提供扎实的知识基础。

    **研究目标**：
    - 深入理解 {topic} 的核心概念、技术原理和发展脉络
    - 基于 {material_content} 提取关键信息、数据和观点
    - 使用搜索工具获取最新、最权威的补充资料
    - 识别技术领域的争议点和不同学派的观点
    - 收集具体案例、实验数据和真实应用场景

    **研究范围**：
    1. **核心概念分解**: 将主题拆解为可讨论的子议题和关键问题
    2. **技术深度挖掘**: 深入探索技术原理、算法机制、实现细节
    3. **数据与事实收集**: 收集关键数据、基准测试、性能指标、案例研究
    4. **多元视角整合**: 从算法、系统、学术、产业等多角度分析
    5. **争议与开放问题**: 识别技术争议、未解决问题、研究方向

    **搜索策略**：
    - 主动使用SafeSearchTool获取最新研究进展和权威资料
    - 交叉验证多个信息源，确保信息准确性
    - 搜索关键词示例：
      * "[技术名] latest research advances 2024"
      * "[主题] benchmark performance data statistics"
      * "[技术] debate controversy different approaches"
      * "[技术] real world application case study"

    **输出要求（播客导向的研究笔记）**：

    输出必须按照以下结构组织，便于后续的播客设计：

    **一、主题核心分解**
    - 核心概念1：[定义] + [重要性] + [可讨论角度]
    - 核心概念2：[定义] + [重要性] + [可讨论角度]
    - 核心概念3：[定义] + [重要性] + [可讨论角度]

    **二、关键数据与事实**
    - 数据点1：[具体数据] + [来源] + [讨论价值]
    - 案例1：[案例描述] + [背景] + [启发意义]
    - 实验结果：[结果描述] + [意义]

    **三、技术深度要点**
    - 技术原理：[核心机制] + [工作方式] + [优势/劣势]
    - 实现细节：[关键技术点] + [实现挑战] + [解决方案]
    - 性能分析：[性能指标] + [对比分析]

    **四、争议与多元观点**
    - 争议点1：[观点A vs 观点B] + [各自依据] + [争论焦点]
    - 争议点2：[观点A vs 观点B] + [各自依据] + [争论焦点]
    - 开放问题：[未解决的问题] + [可能的研究方向]

    **五、实际应用与案例**
    - 应用场景1：[场景描述] + [技术应用] + [效果]
    - 应用场景2：[场景描述] + [技术应用] + [效果]
    - 实践挑战：[挑战描述] + [解决思路]

    **六、推荐讨论问题**
    - 问题1：[问题描述] + [为什么有趣/重要] + [可能的答案角度]
    - 问题2：[问题描述] + [为什么有趣/重要] + [可能的答案角度]
    - 问题3：[问题描述] + [为什么有趣/重要] + [可能的答案角度]

    **七、信息来源**
    - [来源1：URL/文献]
    - [来源2：URL/文献]
    - [来源3：URL/文献]

    **重要约束**：
    - 所有研究必须紧密围绕 {topic} 和 {material_content}，避免无关的发散
    - 主动使用搜索工具获取最新、最准确的信息（至少进行3-5次搜索）
    - 研究笔记应该是"播客友好"的，提供可讨论的角度而非学术论文式的内容
    - 清晰标注所有关键信息的来源，便于后续编辑阶段的事实核查
    - 输出长度控制在3000-5000字符，内容要充实但不冗长

  expected_output: >
    一份结构化的播客导向研究笔记，包含：
    - 主题核心分解（3-5个核心概念）
    - 关键数据与事实（5-10个数据点/案例）
    - 技术深度要点（原理、实现、性能）
    - 争议与多元观点（2-3个争议点）
    - 实际应用与案例（3-5个应用场景）
    - 推荐讨论问题（3-5个高质量问题）
    - 信息来源列表

    所有内容必须基于 {topic} 和 {material_content}，辅以搜索工具获取的补充资料。

  agent: researcher

role_design_task:
  description: >
    基于研究笔记，设计适合本次播客讨论的专家角色。

    **设计目标**：
    根据研究笔记中涉及的内容维度（如算法原理、系统优化、学术研究、产业应用等），
    设计1-2个具有鲜明个性和专业背景的讨论角色，确保每个角色都能为讨论带来独特的视角和价值。

    **角色设计要素**：
    为每个角色设定：
    1. **名字**: 易记、符合角色定位的名字
    2. **专业背景**: 具体的学术/工业背景，让角色有可信度
    3. **擅长领域**: 明确的专业方向，与研究笔记的内容维度对应
    4. **发言风格**: 独特的表达方式（如：严谨学术、工程实用、大胆创新、商业敏锐等）
    5. **代表观点**: 在某些争议点上的倾向性立场（如果适用）

    **角色类型建议**：
    - **主持人**: 负责引导讨论、提出问题、整合观点（必选）
    - **技术专家**: 深入解释技术原理、算法机制（根据主题需要）
    - **工程专家**: 关注实现细节、性能优化、工程实践（根据主题需要）
    - **研究学者**: 提供学术视角、理论分析、发展趋势（根据主题需要）
    - **产业专家**: 分析商业应用、市场影响、实际落地（根据主题需要）

    **角色设计原则**：
    - 角色数量：2-3人对话最佳（包括主持人），最多不超过3人
    - 专业区分：每个角色要有明确的专业区分，避免同质化
    - 视角互补：角色之间的视角要互补，能够形成多维度的讨论
    - 个性鲜明：每个角色要有独特的发言风格和个性特点
    - 服务主题：角色设置要服务于主题讨论的需要，不为设计而设计

    **角色互动关系设计**：
    - 明确角色间的互动模式：互补、对比、冲突、协作
    - 设计可能的观点碰撞点：哪些问题上可能产生有趣的讨论或分歧
    - 确定主持人的引导策略：如何平衡各方观点，推动讨论深入

    **输出格式**：

    **角色1: [主持人名字]**
    - 专业背景: [具体背景描述]
    - 擅长领域: [专业方向]
    - 发言风格: [风格描述]
    - 在讨论中的角色: 引导讨论、提出问题、整合观点、控制节奏

    **角色2: [专家名字]**
    - 专业背景: [具体背景描述]
    - 擅长领域: [专业方向]
    - 发言风格: [风格描述]
    - 代表观点: [在某些问题上的立场]
    - 在讨论中的角色: [主要贡献的维度]

    **角色3: [专家名字]**
    - 专业背景: [具体背景描述]
    - 擅长领域: [专业方向]
    - 发言风格: [风格描述]
    - 代表观点: [在某些问题上的立场]
    - 在讨论中的角色: [主要贡献的维度]

    **角色互动关系**：
    - [描述角色间的互动模式和可能的观点碰撞点]

    **重要约束**：
    - 角色设计必须基于研究笔记的内容维度，不能凭空创造
    - 每个角色必须有明确的价值贡献，不能是装饰性的
    - 角色的专业背景要可信，发言风格要有区分度
    - 避免刻板印象和过度夸张的角色设定

  expected_output: >
    一份完整的角色设计方案，包含：
    - 2-4个角色的详细设定（名字、背景、领域、风格、观点）
    - 每个角色在讨论中的具体职责和价值贡献
    - 角色间的互动关系和可能的讨论碰撞点
    - 主持人的引导策略说明

    所有角色设计必须服务于研究笔记中的主题内容。

  agent: podcast_designer

framework_design_task:
  description: >
    基于研究笔记和角色设计，构建清晰的播客讨论框架（大纲）。

    **框架设计目标**：
    设计一个层次清晰、逻辑连贯、节奏合理的讨论结构，确保播客能够系统地覆盖研究笔记中的核心内容，
    同时保持听众的兴趣和参与感。

    **框架结构要素**：
    将播客讨论划分为4-6个段落，每个段落包含：
    1. **段落名称**: 简短有力的段落标题
    2. **时长预估**: 该段落的预期时长（分钟）
    3. **核心议题**: 该段落要讨论的主要问题或主题
    4. **参与角色**: 该段落的主要发言角色
    5. **关键问题**: 主持人要提出的2-3个关键问题
    6. **预期产出**: 该段落讨论后听众应该理解的内容

    **标准框架模板**（可根据主题调整）：

    **段落1: 开场引入（1-2分钟）**
    - 核心议题: 主题介绍、嘉宾介绍、讨论议程
    - 参与角色: 主持人 + 各位嘉宾简短发言
    - 关键问题: "今天我们要讨论什么？为什么重要？"
    - 预期产出: 让听众明确今天的主题和讨论价值

    **段落2: 基础概念澄清（3-5分钟）**
    - 核心议题: [从研究笔记中提取的核心概念]
    - 参与角色: [最适合解释这个概念的专家]
    - 关键问题: [2-3个基础性问题]
    - 预期产出: 让听众理解基本概念和技术背景

    **段落3: 核心技术深入（5-7分钟）**
    - 核心议题: [从研究笔记中提取的技术要点]
    - 参与角色: [技术专家 + 其他角色补充]
    - 关键问题: [2-3个深入技术问题]
    - 预期产出: 让听众理解技术的工作原理和关键特点

    **段落4: 实际应用与挑战（3-5分钟）**
    - 核心议题: [从研究笔记中提取的应用案例和挑战]
    - 参与角色: [工程/产业专家]
    - 关键问题: [2-3个实践相关问题]
    - 预期产出: 让听众理解技术的实际应用和面临的问题

    **段落5: 争议与深度探讨（5-7分钟）**
    - 核心议题: [从研究笔记中提取的争议点或开放问题]
    - 参与角色: [多个专家展开讨论]
    - 关键问题: [2-3个引发讨论的问题]
    - 预期产出: 让听众了解不同观点和深层次的思考

    **段落6: 总结与展望（1-2分钟）**
    - 核心议题: 关键结论、适用边界、未来发展
    - 参与角色: 主持人主导 + 各专家补充
    - 关键问题: "今天讨论的关键结论是什么？"
    - 预期产出: 让听众带走清晰的关键信息

    **框架设计原则**：
    - **结构清晰**: 层次分明，逻辑连贯，从浅入深
    - **时长控制**: 总时长15-20分钟（约10000-15000字符）
    - **节奏把握**: 快慢结合，有高潮有缓冲
    - **角色分配**: 让每个角色在最擅长的领域充分发挥
    - **问题设计**: 每个段落的问题要递进，能引发深入讨论
    - **听众视角**: 始终考虑听众的理解需求和兴趣点

    **讨论递进逻辑**：
    - 从基础到深入：先澄清概念，再深入技术
    - 从共识到争议：先建立共同理解，再探讨分歧
    - 从理论到实践：先讲原理，再谈应用
    - 从现状到未来：先分析当前，再展望趋势

    **输出格式**：

    为每个段落提供完整的设计：

    **段落X: [段落名称]**
    时长: [X-Y分钟]
    核心议题: [具体描述]
    参与角色: [角色1, 角色2]
    关键问题:
      1. [问题1]
      2. [问题2]
      3. [问题3]
    预期产出: [听众应该理解的内容]

    **重要约束**：
    - 框架必须完全基于研究笔记的内容，不能偏离主题
    - 每个段落都要有明确的目标和价值
    - 角色分配要合理，让每个角色都有发挥空间
    - 总时长控制在15-20分钟（约10000-15000字符）
    - 预留足够空间给关键技术点的深入讨论

  expected_output: >
    一份完整的播客讨论框架，包含：
    - 4-6个结构化的讨论段落
    - 每个段落的时长、议题、角色、问题、产出
    - 清晰的讨论递进逻辑
    - 总时长控制在15-20分钟

    框架必须基于研究笔记内容，并充分利用角色设计方案。

  agent: podcast_designer

script_writing_task:
  description: >
    基于研究笔记、角色设计和讨论框架，撰写完整的播客对话脚本。

    **重要：输出语言要求**
    - 全程使用 {language} 进行对话创作
    - 所有角色的对话内容都必须使用 {language}
    - 保持语言的一致性，不要混用其他语言

    **脚本创作目标**：
    严格按照角色设定和讨论框架，撰写一份自然流畅、富有真实感的多人对话脚本，
    将研究笔记中的技术内容转化为引人入胜、易于理解的音频内容。

    **内容聚焦与交叉讨论（新增要求）**：
    - 讨论必须紧密围绕 {material_content} 展开，避免脱离材料的无关发散
    - 允许对材料进行讲解：包括对材料中的算法、概念、观点、结论进行拆解与说明
    - 必须结合通过搜索得到的前沿事实（来自研究阶段与 crew 知识库 knowledge_sources），与材料内容进行交叉讨论：
      比如产业最新进展、论文更新、版本迭代、应用案例等，并明确与材料的一致、互补或差异
    - 在讨论过程中，清晰标注何处是在引用/解释 {material_content}，何处是在引入搜索得到的补充事实（用口语方式自然表述，无需文献格式）
    - 讨论的最终部分需要引申出进一步的思考与启示：包括开放问题、未来方向、实践建议或值得关注的风险与边界

    **创作原则（关键约束）**：

    1. **角色一致性**：
       - 每个角色的发言必须符合其专业背景和发言风格
       - 保持角色个性的连贯性，让听众能够识别出角色特点
       - **主持人的核心能力**：
         * 精准总结（paraphrase）嘉宾观点，为听众梳理要点
         * 丝滑自然的转场，通过总结引出下一话题
         * 精准的问题设计、巧妙的观点整合
       - 主持人转场要像朋友聊天时的自然联想，而非会议主持人的议程推进

    2. **技术准确性**：
       - 所有技术内容必须完全来自研究笔记，不能杜撰
       - 技术表述要准确，但要口语化
       - 涉及数据、实验结果时，必须有研究笔记的支撑

    3. **对话自然度**：
       - **口语化表达**: 避免书面语和学术腔，使用日常对话的表达方式
       - **真实互动**: 有问有答，有追问有回应，有分歧也有整合
       - **思维过程**: 展现思考轨迹，如"让我想想"、"换个角度说"
       - **真实停顿**: 适当使用"嗯"、"那个"、"实际上"等连接词
       - **观点碰撞**: 专家间可以有不同观点，有礼貌的质疑和反驳

    4. **深入浅出**：
       - 用类比、例子、具体场景解释复杂概念
       - 避免抽象术语堆砌，优先用听众能理解的语言
       - 必要时可以用"打个比方"、"举个例子"来引入类比

    5. **避免公式与符号**：
       - 绝对不使用数学公式、代码片段
       - 涉及数学思想时，用口语解释核心直觉和关键关系
       - 用"大约"、"几倍"等口语化的数量表达

    6. **TTS友好**：
       - 只包含可被听到的口语内容
       - 不使用Markdown、列表、编号、表情、括号内提示或舞台说明
       - 标点符号适配语音播放：适当使用逗号、句号、问号、感叹号

    **脚本结构**：

    严格按照讨论框架的段落结构组织对话：

    **开场段落**：
    - 主持人用一句话介绍主题和嘉宾，直接进入核心议题
    - 嘉宾无需自我介绍，通过对话自然展现专业背景
    - 快速引入第一个讨论问题，避免冗长铺垫

    **主体段落**（按框架设计）：
    - 主持人提出关键问题
    - 相关专家详细回答，展开技术讨论
    - 主持人追问或引导深入
    - 其他专家补充观点或提出不同看法
    - 专家间进行自然的互动交流
    - 主持人用自然转场话术承接下一个议题（避免生硬切换）

    **收束段落**：
    - 主持人总结今天讨论的关键结论，明确哪些结论直接来源于 {material_content}，哪些结论由前沿事实补充强化
    - 专家引申进一步的思考与启示：开放问题、未来研究/落地方向、实践建议或风险边界提醒
    - 主持人简短回应并感谢嘉宾，结束讨论

    **对话创作技巧**：

    1. **主持人的引导与转场**：
       - 提出开放性问题，而非简单的是非题
       - 引用material_content中的具体内容（全程至少3处）
       - **精准总结能力**：用简洁的语言paraphrase嘉宾的核心观点，确认理解并为听众梳理要点
       - 及时追问深入细节："能具体说说吗？"、"为什么会这样？"
       - 代表听众提问："听众可能会想知道..."

       **转场技巧（关键）**：
       - **精准总结式（最推荐）**：用自己的话paraphrase嘉宾的核心观点，然后引出深入讨论或下一话题
         * "所以你的意思是XX通过YY实现了ZZ，那这个方案在大规模场景下会怎样？"
         * "如果我理解对的话，关键在于XX和YY之间的权衡，这让我想到..."
         * "听起来核心挑战是XX，那业界有什么好的解决思路吗？"
       - **承上启下式**："刚才提到XX，这让我想到另一个问题..."
       - **自然关联式**："说到这个，我们不得不聊聊..."
       - **问题递进式**："理解了原理，那实际应用中会遇到什么问题？"
       - **观点桥接式**："张博士从技术角度解释了，李工你从工程实践怎么看？"
       - 避免生硬的"下一个话题"、"接下来我们讨论"等直白过渡
       - 转场要像聊天中的自然联想，而非刻意的议程推进

    2. **专家的回答**：
       - 结论先行，先给答案再解释原因
       - 提供具体技术细节、数据或方案
       - 使用类比和例子帮助理解
       - 长度自适应：简单问题简短回答（200字符），复杂问题详细展开（600字符）
       - 可以反问主持人或其他专家，推动讨论

    3. **专家间的互动**：
       - 对其他专家的观点进行回应、补充
       - 礼貌地提出不同看法："我有点不同的理解..."
       - 建立在前面讨论的基础上："刚才XX提到的..."
       - 自然地交接发言权："这个问题XX可能更有发言权"

    **长度控制**：
    - 总脚本长度：10000-15000字符（强制要求）
    - 如果内容不足10000字符，必须扩展讨论深度
    - 单次发言：200-600字符，根据问题复杂度调整
    - 每个核心技术点至少3-5轮深入交流
    - 确保有足够的互动和观点碰撞

    **输出格式**：

    使用以下格式输出对话：

    [角色名] 对话内容...
    [角色名] 对话内容...
    [角色名] 对话内容...

    示例（开场直入主题）：
    [雷克思] 今天和张博士、李工一起聊聊Transformer的注意力机制。张博士，这个机制的核心原理是什么？
    [张博士] 简单来说，它的核心思想是通过动态权重分配，让模型自动聚焦到重要信息...

    示例（精准总结式转场 - 最推荐）：
    [张博士] ...所以本质上是通过Query、Key、Value三个矩阵来计算注意力权重。
    [雷克思] 如果我理解对的话，就是通过这三个矩阵的交互，模型可以动态判断哪些信息更重要。那李工，在实际工程中实现这套机制会遇到什么挑战？
    [李工] 嗯，最大的挑战其实是计算复杂度，因为注意力计算是序列长度的平方级别...
    [雷克思] 所以序列越长，计算开销越大。那业界都有哪些优化方案来解决这个问题？

    **重要约束**：
    - 必须严格遵循讨论框架的段落结构和问题设计
    - 所有技术内容必须来自研究笔记，不能编造；补充事实需来源于研究阶段的搜索结果或 crew 知识库（knowledge_sources）
    - 必须引用 material_content 中的具体内容（全程至少3处），并将其作为讨论的主线
    - 需要至少2处将前沿事实与 material_content 进行交叉对照或对比，形成观点的互证或辨析
    - 保持角色个性和发言风格的一致性
    - **主持人每次转场都必须自然流畅**，避免"接下来"、"下一个问题"等生硬表达
    - 确保对话自然流畅，有真实的互动感
    - 总长度必须达到10000-15000字符
    - 只包含可被听到的口语内容，无格式标记

  expected_output: >
    一份完整的播客对话脚本，格式为：
    [角色名] 对话内容...
    [角色名] 对话内容...

    要求：
    - 严格遵循角色设定和讨论框架
    - 所有技术内容基于研究笔记
    - 对话自然流畅，富有真实感
    - 引用material_content中的具体内容（至少3处）
    - 总长度10000-15000字符
    - TTS友好，无Markdown、列表、编号、表情
    - 每个发言独占一行

  agent: podcast_designer

editing_task:
  description: >
    对播客脚本进行语言润色和事实核查，确保脚本既自然可听，又准确可信。

    **重要：语言一致性要求**
    - 确保所有对话内容使用 {language}
    - 保持语言的一致性和纯度
    - 润色时遵循 {language} 的自然表达习惯

    **编辑目标**：
    在严格保持脚本内容和技术信息不变的前提下，优化语言表达的自然度和流畅度，
    同时核查所有技术事实的准确性，确保脚本适合TTS播放。

    **编辑流程**：

    **第一步：事实核查**

    将脚本中的技术陈述与研究笔记进行逐一对照：
    - 核查所有技术概念、原理的表述是否准确
    - 核查所有数据、实验结果、性能指标是否正确
    - 核查所有案例、应用场景的描述是否真实
    - 核查material_content的引用是否准确无误

    如发现不准确或可疑的表述：
    - 使用搜索工具验证关键技术细节
    - 对照研究笔记确认信息来源
    - 标记需要修正的地方

    搜索工具使用策略：
    - 验证技术细节："[技术名] technical specifications accuracy"
    - 核查数据准确性："[数据点] source verification"
    - 确认最新信息："[技术名] latest status 2024"

    **第二步：语言润色**

    优化脚本的口语自然度和流畅度：

    1. **口语化调整**：
       - 将生硬的书面语转换为自然口语表达
       - 适度添加口语停顿词："嗯"、"那个"、"实际上"等
       - 保持专业性的同时增强可听性

    2. **连接优化**：
       - 优化句子间的自然连接，避免突兀转折
       - 使用更自然的过渡表达："说到这个"、"顺便提一下"
       - **重点优化主持人转场**：将"接下来"、"下一个问题"等生硬表达改为自然联想式过渡
       - 转场优化示例：
         * 生硬："接下来我们讨论应用场景" → 自然："刚才提到的原理，在实际应用中会是什么样？"
         * 生硬："下一个问题是性能优化" → 自然："说到计算复杂度，那优化方案效果如何呢？"
         * **精准总结式（最推荐）**：
           - 生硬："好的，下一个问题..."
           - 自然："所以你的意思是通过XX实现了YY，那这个方案在ZZ场景下会怎样？"
           - 自然："如果我理解对的话，核心挑战是AA和BB之间的权衡，这让我想到..."
       - 确保对话的流畅性和连贯性

    3. **标点符号调整**：
       - 去除特殊符号，只保留基本标点
       - 优化标点符号以适配TTS播放
       - 适当使用逗号、句号、问号、感叹号

    4. **节奏调整**：
       - 优化句子长短搭配，符合自然说话节奏
       - 避免过长的句子（超过50字）
       - 避免过短、零碎的句子

    **第三步：术语中文化**

    在不改变技术含义的前提下，优化术语使用：

    1. **翻译原则**：
       - 能翻译的英文专有名词、技术术语、机构/产品名称，优先使用中文译名

    2. **保留原则**：
       - 无公认译名或翻译会引起歧义时，保留英文原文
       - 材料直接引用的原文不做改动
       - 专有名词的人名保留原文

    3. **常见术语翻译示例**：
       - Transformer → 变换器
       - Attention → 注意力机制
       - Residual Connection → 残差连接
       - Google → 谷歌
       - OpenAI → 开放人工智能

    **编辑原则（绝对约束）**：

    - **内容保真**: 绝对不能修改、删除或添加任何技术信息、观点或结论
    - **信息完整**: 保持所有角色的发言内容和逻辑完整性
    - **观点不变**: 不能改变任何角色的技术立场或判断
    - **结构保持**: 不调整对话的逻辑结构、段落划分
    - **长度保持**: 不调整对话的总体长度和深度
    - **引用不变**: 不修改material_content引用的具体内容

    **严格禁止的操作**：
    - 不能增加或删除技术细节
    - 不能改变角色的核心观点
    - 不能修改讨论的逻辑结构
    - 不能调整对话的长度或深度
    - 不能改变角色的发言顺序
    - 不能添加脚本中没有的信息

    **输出格式**：

    使用以下格式输出润色后的脚本：

    [说话人] 润色后的对话内容...
    [说话人] 润色后的对话内容...

    要求：
    - 使用 [说话人] 内容 格式，每个发言独占一行
    - 语言自然流畅，保持原意
    - TTS友好，无Markdown、列表、编号、表情或舞台说明
    - 能翻译的英文术语尽量使用中文译名（首次出现可括注英文）
    - 材料直接引用的原文不作改动
    - 技术内容完全准确，与研究笔记一致

    **质量检查清单**：

    完成编辑后，进行以下检查：
    - [ ] 所有技术事实已核查，与研究笔记一致
    - [ ] 语言表达自然流畅，适合口语播放
    - [ ] **主持人转场自然流畅**，无"接下来"、"下一个问题"等生硬表达
    - [ ] 术语中文化处理得当，首次出现已括注
    - [ ] 标点符号适配TTS，无特殊符号
    - [ ] 句子长短适中，节奏自然
    - [ ] 没有添加或删除任何技术信息
    - [ ] 角色观点和立场保持不变
    - [ ] 对话结构和长度保持不变
    - [ ] material_content引用准确无误

    **重要提醒**：
    编辑的工作是"锦上添花"，而非"改头换面"。语言优化必须服务于内容准确性，
    绝不能为了表达的流畅而牺牲技术的准确。

  expected_output: >
    一份经过事实核查和语言润色的最终播客脚本，格式为：
    #播客标题
    [说话人] 对话内容...
    [说话人] 对话内容...

    要求：
    - **第一行必须是播客标题**：以 # 开头，后跟10-30个字符的简洁标题
      * 标题要准确概括播客核心主题
      * 使用吸引人的中文表达，技术术语可保留英文
      * 示例：#深入探讨Transformer的注意力机制
    - 所有技术事实准确无误，与研究笔记一致
    - 语言自然流畅，适合TTS播放，所见即所听
    - 术语中文化处理得当
    - 内容、观点、结构完全保持不变
    - TTS友好，无Markdown、列表、编号、表情
    - 每个发言独占一行

    这是可以直接用于录制的最终版本脚本。

  agent: editor
