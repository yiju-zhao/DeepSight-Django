# Generated by Django 5.2.4 on 2025-09-09 19:42

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BatchJob',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('job_type', models.CharField(choices=[('url_parse', 'URL Parse'), ('url_parse_media', 'URL Parse with Media'), ('file_upload', 'File Upload')], help_text='Type of batch operation', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('partially_completed', 'Partially Completed')], default='pending', help_text='Current status of the batch job', max_length=20)),
                ('total_items', models.PositiveIntegerField(default=0, help_text='Total number of items to process')),
                ('completed_items', models.PositiveIntegerField(default=0, help_text='Number of successfully completed items')),
                ('failed_items', models.PositiveIntegerField(default=0, help_text='Number of failed items')),
            ],
            options={
                'verbose_name': 'Batch Job',
                'verbose_name_plural': 'Batch Jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatSession',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this chat session', unique=True)),
                ('title', models.CharField(blank=True, help_text='Display title for this session (auto-generated if empty)', max_length=200)),
                ('status', models.CharField(choices=[('active', 'Active'), ('closed', 'Closed'), ('archived', 'Archived')], default='active', help_text='Current status of the session', max_length=20)),
                ('ragflow_session_id', models.CharField(blank=True, help_text='RagFlow session ID for API calls', max_length=100, null=True)),
                ('ragflow_agent_id', models.CharField(blank=True, help_text='RagFlow agent ID associated with this session', max_length=100, null=True)),
                ('session_metadata', models.JSONField(blank=True, help_text='Additional session configuration and metadata', null=True)),
                ('last_activity', models.DateTimeField(auto_now=True, help_text='Last time there was activity in this session')),
                ('started_at', models.DateTimeField(auto_now_add=True, help_text='When this session was started')),
                ('ended_at', models.DateTimeField(blank=True, help_text='When this session was closed/ended', null=True)),
            ],
            options={
                'verbose_name': 'Chat Session',
                'verbose_name_plural': 'Chat Sessions',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='KnowledgeBaseItem',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('parsing_status', models.CharField(choices=[('queueing', 'Queueing'), ('parsing', 'Parsing'), ('done', 'Done')], db_index=True, default='queueing', help_text='Parsing status of this knowledge base item', max_length=20)),
                ('title', models.CharField(help_text='Title or identifier for this knowledge item', max_length=512)),
                ('content_type', models.CharField(choices=[('text', 'Text Content'), ('document', 'Document'), ('webpage', 'Webpage'), ('media', 'Media File')], db_index=True, default='text', max_length=50)),
                ('content', models.TextField(blank=True, help_text='Inline text content if not stored as file')),
                ('metadata', models.JSONField(blank=True, help_text='Source metadata, processing info, etc.', null=True)),
                ('source_hash', models.CharField(blank=True, db_index=True, help_text='Hash of original content to detect duplicates', max_length=64)),
                ('tags', models.JSONField(blank=True, default=list, help_text='Tags for categorization and search')),
                ('notes', models.TextField(blank=True, help_text='User notes about this knowledge item')),
                ('file_object_key', models.CharField(blank=True, db_index=True, help_text='MinIO object key for processed content file', max_length=255, null=True)),
                ('original_file_object_key', models.CharField(blank=True, db_index=True, help_text='MinIO object key for original file', max_length=255, null=True)),
                ('file_metadata', models.JSONField(blank=True, default=dict, help_text='File metadata stored in database')),
                ('ragflow_document_id', models.CharField(blank=True, db_index=True, help_text='RagFlow document ID linking to uploaded document in RagFlow dataset', max_length=255)),
                ('ragflow_processing_status', models.CharField(choices=[('pending', 'Pending'), ('uploading', 'Uploading'), ('parsing', 'Parsing'), ('completed', 'Completed'), ('failed', 'Failed')], db_index=True, default='pending', help_text='RagFlow document processing status', max_length=20)),
            ],
            options={
                'verbose_name': 'Knowledge Base Item',
                'verbose_name_plural': 'Knowledge Base Items',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notebook',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the notebook', max_length=255)),
                ('description', models.TextField(blank=True, help_text="Optional description of the notebook's purpose")),
                ('ragflow_dataset_id', models.CharField(blank=True, help_text='RagFlow dataset ID for this notebook', max_length=255, null=True)),
                ('ragflow_agent_id', models.CharField(blank=True, help_text='RagFlow agent ID for this notebook', max_length=255, null=True)),
                ('ragflow_chat_id', models.CharField(blank=True, help_text='RagFlow chat assistant ID for this notebook', max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Notebook',
                'verbose_name_plural': 'Notebooks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotebookChatMessage',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sender', models.CharField(choices=[('user', 'User'), ('assistant', 'Assistant')], help_text='Who sent this message', max_length=10)),
                ('message', models.TextField(help_text='Content of the chat message')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When the message was sent')),
                ('metadata', models.JSONField(blank=True, help_text='Additional metadata like sources, confidence, etc.', null=True)),
            ],
            options={
                'verbose_name': 'Notebook Chat Message',
                'verbose_name_plural': 'Notebook Chat Messages',
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SessionChatMessage',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sender', models.CharField(choices=[('user', 'User'), ('assistant', 'Assistant')], help_text='Who sent this message', max_length=10)),
                ('message', models.TextField(help_text='Content of the chat message')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When the message was sent')),
                ('metadata', models.JSONField(blank=True, help_text='Additional metadata like sources, confidence, tokens used, etc.', null=True)),
                ('message_order', models.PositiveIntegerField(default=0, help_text='Order of this message within the session')),
            ],
            options={
                'verbose_name': 'Session Chat Message',
                'verbose_name_plural': 'Session Chat Messages',
                'ordering': ['session', 'message_order', 'timestamp'],
            },
        ),
        migrations.CreateModel(
            name='BatchJobItem',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('item_data', models.JSONField(help_text='URL, filename, or other item-specific data')),
                ('upload_id', models.CharField(blank=True, help_text='Upload/processing ID for status tracking', max_length=64)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', help_text='Current status of this item', max_length=20)),
                ('result_data', models.JSONField(blank=True, help_text='Processing results', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if processing failed')),
                ('batch_job', models.ForeignKey(help_text='Batch job this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='notebooks.batchjob')),
            ],
            options={
                'verbose_name': 'Batch Job Item',
                'verbose_name_plural': 'Batch Job Items',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='KnowledgeBaseImage',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('figure_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique figure identifier, different from primary key')),
                ('image_caption', models.TextField(blank=True, help_text='Description or caption for the image')),
                ('minio_object_key', models.CharField(db_index=True, help_text='MinIO object key for the image file', max_length=255)),
                ('image_metadata', models.JSONField(default=dict, help_text='Image metadata including dimensions, format, size, etc.')),
                ('content_type', models.CharField(blank=True, help_text='MIME type of the image (image/png, image/jpeg, etc.)', max_length=100)),
                ('file_size', models.PositiveIntegerField(default=0, help_text='File size in bytes')),
                ('knowledge_base_item', models.ForeignKey(help_text='Knowledge base item this image belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='images', to='notebooks.knowledgebaseitem')),
            ],
            options={
                'verbose_name': 'Knowledge Base Image',
                'verbose_name_plural': 'Knowledge Base Images',
                'ordering': ['knowledge_base_item', 'created_at'],
            },
        ),
    ]
