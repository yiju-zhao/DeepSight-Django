# Generated by Django 5.2.4 on 2025-09-03 19:09

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Notebook',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the notebook', max_length=255)),
                ('description', models.TextField(blank=True, help_text="Optional description of the notebook's purpose")),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notebook',
                'verbose_name_plural': 'Notebooks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='KnowledgeBaseItem',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('parsing_status', models.CharField(choices=[('queueing', 'Queueing'), ('parsing', 'Parsing'), ('done', 'Done')], db_index=True, default='queueing', help_text='Parsing status of this knowledge base item', max_length=20)),
                ('title', models.CharField(help_text='Title or identifier for this knowledge item', max_length=512)),
                ('content_type', models.CharField(choices=[('text', 'Text Content'), ('document', 'Document'), ('webpage', 'Webpage'), ('media', 'Media File')], db_index=True, default='text', max_length=50)),
                ('content', models.TextField(blank=True, help_text='Inline text content if not stored as file')),
                ('metadata', models.JSONField(blank=True, help_text='Source metadata, processing info, etc.', null=True)),
                ('source_hash', models.CharField(blank=True, db_index=True, help_text='Hash of original content to detect duplicates', max_length=64)),
                ('tags', models.JSONField(blank=True, default=list, help_text='Tags for categorization and search')),
                ('notes', models.TextField(blank=True, help_text='User notes about this knowledge item')),
                ('file_object_key', models.CharField(blank=True, db_index=True, help_text='MinIO object key for processed content file', max_length=255, null=True)),
                ('original_file_object_key', models.CharField(blank=True, db_index=True, help_text='MinIO object key for original file', max_length=255, null=True)),
                ('file_metadata', models.JSONField(blank=True, default=dict, help_text='File metadata stored in database')),
                ('ragflow_document_id', models.CharField(blank=True, db_index=True, help_text='RagFlow document ID linking to uploaded document in RagFlow dataset', max_length=255)),
                ('ragflow_processing_status', models.CharField(choices=[('pending', 'Pending'), ('uploading', 'Uploading'), ('parsing', 'Parsing'), ('completed', 'Completed'), ('failed', 'Failed')], db_index=True, default='pending', help_text='RagFlow document processing status', max_length=20)),
                ('notebook', models.ForeignKey(help_text='Notebook this knowledge item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='knowledge_base_items', to='notebooks.notebook')),
            ],
            options={
                'verbose_name': 'Knowledge Base Item',
                'verbose_name_plural': 'Knowledge Base Items',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BatchJob',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('job_type', models.CharField(choices=[('url_parse', 'URL Parse'), ('url_parse_media', 'URL Parse with Media'), ('file_upload', 'File Upload')], help_text='Type of batch operation', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('partially_completed', 'Partially Completed')], default='pending', help_text='Current status of the batch job', max_length=20)),
                ('total_items', models.PositiveIntegerField(default=0, help_text='Total number of items to process')),
                ('completed_items', models.PositiveIntegerField(default=0, help_text='Number of successfully completed items')),
                ('failed_items', models.PositiveIntegerField(default=0, help_text='Number of failed items')),
                ('notebook', models.ForeignKey(help_text='Notebook this batch job belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='batch_jobs', to='notebooks.notebook')),
            ],
            options={
                'verbose_name': 'Batch Job',
                'verbose_name_plural': 'Batch Jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotebookChatMessage',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sender', models.CharField(choices=[('user', 'User'), ('assistant', 'Assistant')], help_text='Who sent this message', max_length=10)),
                ('message', models.TextField(help_text='Content of the chat message')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When the message was sent')),
                ('metadata', models.JSONField(blank=True, help_text='Additional metadata like sources, confidence, etc.', null=True)),
                ('notebook', models.ForeignKey(help_text='Notebook this chat message belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='chat_messages', to='notebooks.notebook')),
            ],
            options={
                'verbose_name': 'Notebook Chat Message',
                'verbose_name_plural': 'Notebook Chat Messages',
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='RagFlowDataset',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ragflow_dataset_id', models.CharField(help_text='RagFlow dataset ID from RagFlow API', max_length=255, unique=True)),
                ('dataset_name', models.CharField(help_text='Human-readable dataset name (generated from notebook name + user ID)', max_length=255)),
                ('ragflow_chat_id', models.CharField(blank=True, help_text='RagFlow chat assistant ID for this dataset', max_length=255)),
                ('status', models.CharField(choices=[('creating', 'Creating'), ('active', 'Active'), ('error', 'Error'), ('deleting', 'Deleting')], db_index=True, default='creating', help_text='Current status of the dataset', max_length=20)),
                ('error_message', models.TextField(blank=True, help_text='Error message if dataset creation/management failed')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='RagFlow configuration and statistics')),
                ('notebook', models.OneToOneField(help_text='Notebook this dataset belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='ragflow_dataset', to='notebooks.notebook')),
            ],
            options={
                'verbose_name': 'RagFlow Dataset',
                'verbose_name_plural': 'RagFlow Datasets',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BatchJobItem',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('item_data', models.JSONField(help_text='URL, filename, or other item-specific data')),
                ('upload_id', models.CharField(blank=True, help_text='Upload/processing ID for status tracking', max_length=64)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', help_text='Current status of this item', max_length=20)),
                ('result_data', models.JSONField(blank=True, help_text='Processing results', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if processing failed')),
                ('batch_job', models.ForeignKey(help_text='Batch job this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='notebooks.batchjob')),
            ],
            options={
                'verbose_name': 'Batch Job Item',
                'verbose_name_plural': 'Batch Job Items',
                'ordering': ['created_at'],
                'indexes': [models.Index(fields=['batch_job', 'status'], name='notebooks_b_batch_j_1526f0_idx'), models.Index(fields=['batch_job', 'created_at'], name='notebooks_b_batch_j_536e2e_idx'), models.Index(fields=['upload_id'], name='notebooks_b_upload__cb0898_idx')],
            },
        ),
        migrations.CreateModel(
            name='KnowledgeBaseImage',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('figure_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique figure identifier, different from primary key')),
                ('image_caption', models.TextField(blank=True, help_text='Description or caption for the image')),
                ('minio_object_key', models.CharField(db_index=True, help_text='MinIO object key for the image file', max_length=255)),
                ('image_metadata', models.JSONField(default=dict, help_text='Image metadata including dimensions, format, size, etc.')),
                ('content_type', models.CharField(blank=True, help_text='MIME type of the image (image/png, image/jpeg, etc.)', max_length=100)),
                ('file_size', models.PositiveIntegerField(default=0, help_text='File size in bytes')),
                ('knowledge_base_item', models.ForeignKey(help_text='Knowledge base item this image belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='images', to='notebooks.knowledgebaseitem')),
            ],
            options={
                'verbose_name': 'Knowledge Base Image',
                'verbose_name_plural': 'Knowledge Base Images',
                'ordering': ['knowledge_base_item', 'created_at'],
                'indexes': [models.Index(fields=['knowledge_base_item', 'created_at'], name='notebooks_k_knowled_01b34a_idx'), models.Index(fields=['minio_object_key'], name='notebooks_k_minio_o_bcbe25_idx'), models.Index(fields=['figure_id'], name='notebooks_k_figure__1780d0_idx')],
                'constraints': [models.CheckConstraint(condition=models.Q(('minio_object_key', ''), _negated=True), name='image_object_key_not_empty')],
            },
        ),
        migrations.AddIndex(
            model_name='notebook',
            index=models.Index(fields=['user', '-created_at'], name='notebooks_n_user_id_85ff82_idx'),
        ),
        migrations.AddIndex(
            model_name='notebook',
            index=models.Index(fields=['user', 'name'], name='notebooks_n_user_id_c83685_idx'),
        ),
        migrations.AddConstraint(
            model_name='notebook',
            constraint=models.UniqueConstraint(fields=('user', 'name'), name='unique_notebook_name_per_user'),
        ),
        migrations.AddIndex(
            model_name='knowledgebaseitem',
            index=models.Index(fields=['notebook', '-created_at'], name='notebooks_k_noteboo_a2cd57_idx'),
        ),
        migrations.AddIndex(
            model_name='knowledgebaseitem',
            index=models.Index(fields=['notebook', 'parsing_status'], name='notebooks_k_noteboo_14d6f2_idx'),
        ),
        migrations.AddIndex(
            model_name='knowledgebaseitem',
            index=models.Index(fields=['notebook', 'content_type'], name='notebooks_k_noteboo_74218b_idx'),
        ),
        migrations.AddIndex(
            model_name='knowledgebaseitem',
            index=models.Index(fields=['notebook', 'source_hash'], name='notebooks_k_noteboo_fd687d_idx'),
        ),
        migrations.AddIndex(
            model_name='knowledgebaseitem',
            index=models.Index(fields=['file_object_key'], name='notebooks_k_file_ob_b76e2e_idx'),
        ),
        migrations.AddIndex(
            model_name='knowledgebaseitem',
            index=models.Index(fields=['original_file_object_key'], name='notebooks_k_origina_939f6d_idx'),
        ),
        migrations.AddIndex(
            model_name='knowledgebaseitem',
            index=models.Index(fields=['ragflow_document_id'], name='notebooks_k_ragflow_a2c381_idx'),
        ),
        migrations.AddIndex(
            model_name='knowledgebaseitem',
            index=models.Index(fields=['notebook', 'ragflow_processing_status'], name='notebooks_k_noteboo_43feb0_idx'),
        ),
        migrations.AddConstraint(
            model_name='knowledgebaseitem',
            constraint=models.CheckConstraint(condition=models.Q(('title', ''), _negated=True), name='knowledge_item_title_not_empty'),
        ),
        migrations.AddIndex(
            model_name='batchjob',
            index=models.Index(fields=['notebook', '-created_at'], name='notebooks_b_noteboo_03c780_idx'),
        ),
        migrations.AddIndex(
            model_name='batchjob',
            index=models.Index(fields=['notebook', 'status'], name='notebooks_b_noteboo_768522_idx'),
        ),
        migrations.AddIndex(
            model_name='batchjob',
            index=models.Index(fields=['notebook', 'job_type'], name='notebooks_b_noteboo_149a3f_idx'),
        ),
        migrations.AddIndex(
            model_name='batchjob',
            index=models.Index(fields=['status', '-created_at'], name='notebooks_b_status_424cec_idx'),
        ),
        migrations.AddConstraint(
            model_name='batchjob',
            constraint=models.CheckConstraint(condition=models.Q(('total_items__gte', 0)), name='batch_job_total_items_non_negative'),
        ),
        migrations.AddConstraint(
            model_name='batchjob',
            constraint=models.CheckConstraint(condition=models.Q(('completed_items__gte', 0)), name='batch_job_completed_items_non_negative'),
        ),
        migrations.AddConstraint(
            model_name='batchjob',
            constraint=models.CheckConstraint(condition=models.Q(('failed_items__gte', 0)), name='batch_job_failed_items_non_negative'),
        ),
        migrations.AddIndex(
            model_name='notebookchatmessage',
            index=models.Index(fields=['notebook', 'timestamp'], name='notebooks_n_noteboo_7e61d9_idx'),
        ),
        migrations.AddIndex(
            model_name='notebookchatmessage',
            index=models.Index(fields=['notebook', 'sender', 'timestamp'], name='notebooks_n_noteboo_4587d3_idx'),
        ),
        migrations.AddConstraint(
            model_name='notebookchatmessage',
            constraint=models.CheckConstraint(condition=models.Q(('message', ''), _negated=True), name='chat_message_not_empty'),
        ),
        migrations.AddIndex(
            model_name='ragflowdataset',
            index=models.Index(fields=['notebook', 'status'], name='notebooks_r_noteboo_74970d_idx'),
        ),
        migrations.AddIndex(
            model_name='ragflowdataset',
            index=models.Index(fields=['ragflow_dataset_id'], name='notebooks_r_ragflow_eab4df_idx'),
        ),
        migrations.AddIndex(
            model_name='ragflowdataset',
            index=models.Index(fields=['status', '-created_at'], name='notebooks_r_status_945096_idx'),
        ),
        migrations.AddConstraint(
            model_name='ragflowdataset',
            constraint=models.CheckConstraint(condition=models.Q(('ragflow_dataset_id', ''), _negated=True), name='ragflow_dataset_id_not_empty'),
        ),
        migrations.AddConstraint(
            model_name='ragflowdataset',
            constraint=models.CheckConstraint(condition=models.Q(('dataset_name', ''), _negated=True), name='dataset_name_not_empty'),
        ),
    ]
